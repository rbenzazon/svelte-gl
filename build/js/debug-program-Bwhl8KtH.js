import{L as r,aw as e,X as a,Y as t,Z as o,_ as n,a7 as i,aA as s,R as l}from"./Menu-BeccOEjd.js";function c(e){const{normals:a,positions:t}=e.attributes,o="Float32Array"!=typeof t&&"data"in t?t.data:t,n="Float32Array"!=typeof a&&"data"in a?a.data:a,i=[];for(let r=0;r<o.length;r+=3)i.push(o[r],o[r+1],o[r+2]),i.push(o[r]+.2*n[r],o[r+1]+.2*n[r+1],o[r+2]+.2*n[r+2]);return{attributes:{positions:new Float32Array(i)},matrix:e.matrix,material:e.material,drawMode:r[1]}}var d="#version 300 es\r\nprecision mediump float;\r\n\r\n#define SHADER_NAME basicFragment\r\n\r\n// Input from vertex shader\r\nin vec3 vertexColor;\r\nin vec3 vNormal;\r\nin vec3 vertex;\r\nin vec3 vViewPosition;\r\nin highp vec2 vUv;\r\n\r\n// Output color\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    // Simply use the vertex color for the fragment color\r\n    // This will create a simple colored line with no lighting effects\r\n    fragColor = vec4(vertexColor, 1.0);\r\n    \r\n    // Alternative: if you want slightly smoother lines with anti-aliasing\r\n    // float intensity = 1.0;\r\n    // fragColor = vec4(vertexColor * intensity, 1.0);\r\n}";function h(){return{createProgram:e,setupProgram:[m,a,t],setupMaterial:[],useProgram:o,selectProgram:n,updateProgram:[]}}function m(){const{gl:r,program:e}=l,a=i(s,{instances:!1,declarations:"",positionModifier:""})({instances:!1,declarations:"",positionModifier:""}),t=r.createShader(r.VERTEX_SHADER);r.shaderSource(t,a),r.compileShader(t),r.getShaderParameter(t,r.COMPILE_STATUS)||console.error(r.getShaderInfoLog(t)),r.attachShader(e,t);const o=r.createShader(r.FRAGMENT_SHADER);r.shaderSource(o,d),r.compileShader(o),r.getShaderParameter(o,r.COMPILE_STATUS)||console.error(r.getShaderInfoLog(o)),r.attachShader(e,o)}export{h as a,c};
