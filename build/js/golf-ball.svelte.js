import { S as SvelteComponent, i as init, s as safe_not_equal, M as Menu, e as element, a as space, c as create_component, b as insert, m as mount_component, n as noop, t as transition_in, d as transition_out, f as detach, g as destroy_component, h as component_subscribe, o as onMount, r as renderer, l as lights, j as scene, k as materials, p as camera, z as set_store_value, A as skyblue, G as createMaterialStore, y as identity, B as createLightStore, C as createPointLight, D as create3DObject, E as createOrbitControls, F as binding_callbacks } from './Menu-BNuEDtNx.js';
import { c as createPolyhedron, g as generateUVs, a as createSmoothShadedNormals } from './polyhedron-BwsPve4I.js';
import { c as createTexture } from './texture-CQ2z1OC_.js';
import { c as createSpecular } from './specular-EbDAe_1w.js';

/* src\golf-ball.svelte generated by Svelte v4.2.18 */

function create_fragment(ctx) {
	let canvas_1;
	let t;
	let menu;
	let current;
	menu = new Menu({});

	return {
		c() {
			canvas_1 = element("canvas");
			t = space();
			create_component(menu.$$.fragment);
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[1](canvas_1);
			insert(target, t, anchor);
			mount_component(menu, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(canvas_1);
				detach(t);
			}

			/*canvas_1_binding*/ ctx[1](null);
			destroy_component(menu, detaching);
		}
	};
}

function animate() {
	
} // animate here

function instance($$self, $$props, $$invalidate) {
	let $renderer;
	let $lights;
	let $scene;
	let $materials;
	let $camera;
	component_subscribe($$self, renderer, $$value => $$invalidate(2, $renderer = $$value));
	component_subscribe($$self, lights, $$value => $$invalidate(3, $lights = $$value));
	component_subscribe($$self, scene, $$value => $$invalidate(4, $scene = $$value));
	component_subscribe($$self, materials, $$value => $$invalidate(5, $materials = $$value));
	component_subscribe($$self, camera, $$value => $$invalidate(6, $camera = $$value));
	let canvas;

	onMount(async () => {
		const normalMap = await createTexture({
			url: "golfball-normal.jpg",
			normalScale: [1, 1],
			type: "normal"
		});

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				canvas,
				backgroundColor: skyblue,
				ambientLightColor: [0xffffff, 0.1]
			},
			$renderer
		);

		set_store_value(
			camera,
			$camera = {
				position: [0, 5, -5],
				target: [0, 0, 0],
				fov: 75
			},
			$camera
		);

		const material = createMaterialStore({
			diffuse: [1, 0.5, 0.5],
			metalness: 0,
			specular: createSpecular({
				roughness: 0.05,
				ior: 1,
				intensity: 2,
				color: [1, 1, 1]
			}),
			normalMap
		});

		set_store_value(materials, $materials = [...$materials, material], $materials);
		const sphereMesh = createPolyhedron(1.5, 7, createSmoothShadedNormals);
		sphereMesh.attributes.uvs = generateUVs(sphereMesh.attributes);
		let identityMatrix = new Array(16).fill(0);
		identity(identityMatrix);

		const light = createLightStore(createPointLight({
			position: [-2, 3, -3],
			color: [1, 1, 1],
			intensity: 20,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		const light2 = createLightStore(createPointLight({
			position: [2, -1, -1],
			color: [1, 1, 1],
			intensity: 20,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		set_store_value(
			scene,
			$scene = [
				...$scene,
				create3DObject({
					...sphereMesh,
					matrix: identityMatrix,
					material
				}),
				light,
				light2
			],
			$scene
		);

		set_store_value(lights, $lights = [...$lights, light, light2], $lights);

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				loop: animate,
				enabled: true
			},
			$renderer
		);

		createOrbitControls(canvas, camera);
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	return [canvas, canvas_1_binding];
}

class Golf_ball extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Golf_ball as default };
