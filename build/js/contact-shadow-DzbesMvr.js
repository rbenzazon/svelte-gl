import{T as r,U as n,Q as e,V as t,W as o,X as i,Y as a,y as s,Z as f,_ as c,$ as u,a0 as l,a1 as m,a2 as g}from"./engine-B_VjxpyI.js";var p="#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform mat4 view;\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 modelMatrix;\r\n\r\nin vec3 position;\r\n\r\nout vec2 vHighPrecisionZW;\r\n\r\nvoid main() {\r\n\tgl_Position = projectionMatrix * view * modelMatrix * vec4( position, 1.0 );\r\n\tvHighPrecisionZW = gl_Position.zw;\r\n}",v="#version 300 es\r\n\r\nout highp vec4 fragColor;\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float darkness;\r\nin vec2 vHighPrecisionZW;\r\n\r\nvoid main() {\r\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\r\n\tfragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * darkness );\r\n\t//fragColor = vec4( vec3( fragCoordZ ), 1.0 );\r\n\t//debug fragColor = vec4( vec3(( 1.0  ) ) ,1.0);\r\n}\r\n\t\t\t\t\t",d="#version 300 es\r\n\r\nin vec4 position;\r\nin vec2 uv;\r\n\r\nout vec2 vTexCoord;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = position;\r\n    vTexCoord = uv;\r\n}",h="#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D sampler;\r\nuniform vec2 uvStride;\r\nuniform vec2[128] offsetAndScale; // x=offset, y=scale\r\nuniform int kernelWidth;\r\n\r\nin vec2 vTexCoord;\r\n\r\nout vec4 fragColor;\r\n\r\nvoid main()\r\n{\r\n\t//fragColor = vec4(vec3(vTexCoord.y),1.0);\r\n\t//fragColor += vec4(vec3(texture(sampler,vTexCoord).w),1.0);\r\n\tfor (int i = 0; i < kernelWidth; i++) {\r\n\r\n\t\tfragColor += texture(\r\n\t\t\tsampler,\r\n\t\t\tvTexCoord + offsetAndScale[i].x * uvStride\r\n\t\t    //   ^------------------------------------  UV coord for this fragment\r\n\t\t    //              ^-------------------------  Offset to sample (in texel space)\r\n\t\t    //                                  ^-----  Amount to move in UV space per texel (horizontal OR vertical only)\r\n\t\t    //   v------------------------------------  Scale down the sample\r\n\t\t) * offsetAndScale[i].y;\r\n\r\n\t\t//fragColor += vec4(vec3(0.01),1.0);\r\n\t}\r\n\t//float value = offsetAndScale[int(vTexCoord.x)].x;\r\n\t//fragColor = vec4(vec3(offsetAndScale[8].x/12.0),1.0);\r\n\t//fragColor = vec4(offsetAndScale[32].x,offsetAndScale[32].x,offsetAndScale[32].x,1.0);//texture(sampler,vTexCoord);\r\n}";const x=0,C=r=>{if(1&~r)throw new Error("Only odd guassian kernel sizes are accepted");if(r<9)throw new Error("Blur must be at least 9 pixels wide");const n=[],e=r/6,t=(r-1)/2;let o=0;for(let i=0;i<r;i++){const r=i-t,a=-r*r/(e*e*2),s=1/(e*Math.sqrt(2*Math.PI))*Math.exp(a);o+=s,n.push(s)}for(let e=0;e<r;e++)n[e]/=o;return n},M=r=>{if(!(1&r.length))throw new Error("Only odd kernel sizes can be lerped");const n=Math.ceil(r.length/2),e=[];let t=1-n,o=r[0];e.push(t,o);const i=r.reduce(((r,n)=>r+n));for(let a=1;a<r.length;a+=2){const s=r[a],f=r[a+1];t=1-n+a+f/(s+f),o=(s+f)/i,e.push(t,o)}return e};function P(n=!1){return function(e){return function(){const{gl:t,programMap:o,vaoMap:i}=r;if(o.has(e)||n)n?(o.set(e,r.program),i.set(e,new Map)):r.program=r.programMap.get(e);else{const n=t.createProgram();o.set(e,n),i.set(e,new Map),r.program=n}}}}function w(){const{gl:e,program:t}=r;n(e,t,d,h)}function T(n){const{gl:e,program:t}=r,o=n===x?[1/r.frameBufferWidth,0]:[0,1/r.frameBufferHeight],i=e.getUniformLocation(t,"uvStride");e.uniform2fv(i,o)}function S(n,p,v,d,h=1024,S=128,b=1){const y=t(o(),n),Z=v/d,_=h*Z,k=h/Z,H=i(s(),-v/2,v/2,-d/2,d/2,0,p),z=a(s(),y,[y[0],y[1]+1,y[2]],[0,0,1]);let L,R,O,D,j,I;function V(){return R}function X(){return I}const q={attributes:{positionsSize:2,positions:new Float32Array([-1,1,-1,-1,1,1,1,-1]),uvs:new Float32Array([0,1,0,0,1,1,1,0])},drawMode:e[5]};return{programs:[{createProgram:function(n){return function(){const{gl:e,programMap:t,vaoMap:o}=r,i=e.createProgram();t.set(n,i),o.set(n,new Map),r.program=i}},setupProgram:[E,f,c,u(_,k,(function(r){j=r}),(function(r){I=r}))],setupMaterial:[A(b)],useProgram:l,selectProgram:m,setupCamera:W(H,z),setFrameBuffer:U((function(){return j}),_,k),allMeshes:!0},{createProgram:P(),setupProgram:[w,f,c,u(_,k,(function(r){L=r}),(function(r){R=r}))],setupMaterial:[(Q=S,function(){const n={size:Q},e=function(r){const n=C(r);return M(n)}(n.size-1);return function(n){const{gl:e,program:t}=r,o=e.getUniformLocation(t,"offsetAndScale");e.uniform2fv(o,n);const i=e.getUniformLocation(t,"kernelWidth");e.uniform1i(i,n.length/2)}(e),n}),()=>T(x),()=>F(X)],useProgram:l,selectProgram:B(x,X),setupCamera:()=>()=>{},setFrameBuffer:U((function(){return L}),_,k),meshes:[q],postDraw:g},{createProgram:P(!0),setupProgram:[u(_,k,(function(r){O=r}),(function(r){D=r}))],setupMaterial:[()=>T(1),()=>F(V)],useProgram:l,selectProgram:B(1,V),setupCamera:()=>()=>{},setFrameBuffer:U((function(){return O}),_,k),meshes:[q],postDraw:g}],getTexture:function(){return D},order:-1};var Q}function A(n){return function(){const{gl:e,program:t}=r,o=e.getUniformLocation(t,"darkness");e.uniform1f(o,n)}}function B(r,n){return function(e){return function(){m(e)(),l(),F(n),T(r)}}}function F(n){const{gl:e}=r,t=n();e.bindTexture(e.TEXTURE_2D,t)}function U(n=null,e,t){return function(){const{gl:o}=r,i=n?n():null;o.bindFramebuffer(o.FRAMEBUFFER,i),r.fbo!==i&&null!=i&&(o.viewport(0,0,e,t),r.frameBufferWidth=e,r.frameBufferHeight=t,o.clearColor(0,0,0,0),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT)),r.fbo=i}}function W(n,e){return function(){return function(){const{gl:t,program:o}=r,i=t.getUniformLocation(o,"projectionMatrix");t.uniformMatrix4fv(i,!1,n);const a=t.getUniformLocation(o,"view");t.uniformMatrix4fv(a,!1,e)}}}function E(){const{gl:e,program:t}=r;n(e,t,p,v)}export{S as c};
