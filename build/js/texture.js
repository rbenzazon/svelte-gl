import{a4 as e,T as r}from"./engine.js";const n={diffuse:"diffuseMap",normal:"normalMap",roughness:"roughnessMap"},t={diffuse:0,normal:1,roughness:2},a=async r=>{let a,u;var s;let v;return r.url?a=await(s=r.url,new Promise(((e,r)=>{const n=new Image;n.onload=()=>{e(n)},n.onerror=r,n.src=s}))):"function"==typeof r.textureBuffer&&(u=r.textureBuffer),{type:n[r.type],coordinateSpace:r.coordinateSpace,shader:e("${declaration?\r\n`\r\nuniform sampler2D ${mapType};\r\n` : ''\r\n}\r\n${declarationNormal?\r\n`\r\nuniform vec2 normalScale;\r\nmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\r\n    vec3 q0 = dFdx( eye_pos.xyz );\r\n    vec3 q1 = dFdy( eye_pos.xyz );\r\n    vec2 st0 = dFdx( uv.st );\r\n    vec2 st1 = dFdy( uv.st );\r\n    vec3 N = surf_norm;\r\n    vec3 q1perp = cross( q1, N );\r\n    vec3 q0perp = cross( N, q0 );\r\n    vec3 T = q1perp * st0.x + q0perp * st1.x;\r\n    vec3 B = q1perp * st0.y + q0perp * st1.y;\r\n    float det = max( dot( T, T ), dot( B, B ) );\r\n    float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\r\n    return mat3( T * scale, B * scale, N );\r\n}\r\n` : ''\r\n}\r\n${diffuseMapSample?\r\n`\r\n    \n    ${coordinateSpace === 'circular' ?\r\n`   vec2 uv = vec2(vUv.x/vUv.y, vUv.y);\r\n` :\r\n`   vec2 uv = vUv;\r\n`}\r\n    vec4 textureColor = texture( ${mapType}, uv );\r\n    material.diffuseColor *= textureColor.rgb;\r\n    material.diffuseAlpha = textureColor.a;\r\n    \r\n` : ''\r\n}\r\n${normalMapSample?\r\n`\r\n    mat3 tbn =  getTangentFrame( -vViewPosition, vNormal, vUv );\r\n    vec2 rotatedUv = vec2(vUv.x, vUv.y);\r\n    normal = texture( ${mapType}, rotatedUv ).xyz * 2.0 - 1.0;\r\n    normal.xy *= normalScale;\r\n    normal = normalize(tbn * normal);\r\n\t\n` : ''\r\n}\r\n${roughnessMapSample?\r\n`\r\n    \n    ${coordinateSpace === 'circular' ?\r\n`   vec2 roughnessUv = vec2(vUv.x/vUv.y, vUv.y);\r\n` :\r\n`   vec2 roughnessUv = vec2(vUv.x, vUv.y);\r\n`}\r\n    vec4 texelRoughness = texture( ${mapType}, roughnessUv );\r\n    roughnessFactor = texelRoughness.g;\r\n` : ''\r\n}",{declaration:!1,declarationNormal:!1,diffuseMapSample:!1,normalMapSample:!1,roughnessMapSample:!1,mapType:void 0,coordinateSpace:void 0}),setupTexture:c(a,n[r.type],t[r.type],r.normalScale,(function(e){v=e}),u),bindTexture:o(t[r.type],(function(){return v}),n[r.type]),...r.url?{url:r.url}:{}}};function o(e,n,t){return function(){const{gl:a,program:o}=r,c=a.getUniformLocation(o,t);a.activeTexture(a["TEXTURE"+e]),a.bindTexture(a.TEXTURE_2D,n()),a.uniform1i(c,e)}}function c(e,n,t,a=[1,1],o,c=null){return function(){const{gl:u,program:s}=r;let v;v=null!==c?c():u.createTexture(),o(v);const l=u.getUniformLocation(s,n);if(u.activeTexture(u["TEXTURE"+t]),u.bindTexture(u.TEXTURE_2D,v),u.uniform1i(l,t),null===c&&u.texImage2D(u.TEXTURE_2D,0,u.RGBA,u.RGBA,u.UNSIGNED_BYTE,e),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MIN_FILTER,u.LINEAR_MIPMAP_LINEAR),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_S,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_T,u.CLAMP_TO_EDGE),u.generateMipmap(u.TEXTURE_2D),null!=a){const e=u.getUniformLocation(s,"normalScale");u.uniform2fv(e,a)}}}export{a as c};
