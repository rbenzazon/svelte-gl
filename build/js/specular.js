import{a4 as n,T as t}from"./engine.js";const r=t=>(t={roughness:0,ior:1.5,intensity:1,color:[1,1,1],...t},{...t,shader:n("${declaration?\r\n`\r\nuniform float roughness;\r\nfloat roughnessFactor = 1.0;\r\nuniform float ior;\r\nuniform float specularIntensity;\r\nuniform vec3 specularColor;\r\n\n#define EPSILON 1e-6\n\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\n\t\n\t\n\n\t\n\t\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n\n} \n\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; \n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float specularF90, const in float roughness) {\n\n\tfloat alpha = pow2( roughness ); \n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\r\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\r\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\r\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, specularF90, dotVH );\n\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( V * D );\n\n}\r\n` : ''\r\n}\r\n${material?\r\n`\r\n\tmaterial.roughness = clamp(roughness * roughnessFactor, 0.0525, 1.0);\r\n\tmaterial.ior = ior;\r\n\tmaterial.specularF90 = mix(specularIntensity, 1.0, metalness);\r\n\tmaterial.specularColor = mix(min(pow2((material.ior - 1.0) / (material.ior + 1.0)) * specularColor, vec3(1.0)) * specularIntensity, diffuse.rgb, metalness);\r\n` : ''\r\n}\r\n${irradiance?\r\n`\r\n\t\treflectedLight.directSpecular += lightParams.irradiance * BRDF_GGX( lightParams.direction, geometryViewDir, normal, material.specularColor, material.specularF90, material.roughness);\r\n` : ''\r\n}",{declaration:!1,material:!1,irradiance:!1}),setupSpecular:o(t),props:t});function o({roughness:n,ior:r,intensity:o,color:a}){return function(){const{gl:e,program:i}=t,l=e.getUniformLocation(i,"specularColor"),s=e.getUniformLocation(i,"roughness"),c=e.getUniformLocation(i,"ior"),f=e.getUniformLocation(i,"specularIntensity");e.uniform3fv(l,a),e.uniform1f(s,n),e.uniform1f(c,r),e.uniform1f(f,o)}}export{r as c};
