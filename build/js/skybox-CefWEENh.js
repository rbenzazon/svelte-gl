import{az as n,aA as r,r as e,aa as t,T as o,Y as a,Z as i,$ as s,a0 as u,R as E,L as c,aB as _,aC as T,z as p,a2 as P,K as g,J as f,V as m,I as l}from"./Menu-BvECENcu.js";var A="#version 300 es\r\n\r\n#define SHADER_NAME skyboxVertex\r\n\r\nin vec4 position;\r\nout vec4 v_position;\r\nvoid main() {\r\n    v_position = position;\r\n    gl_Position = position;\r\n    gl_Position.z = 1.0;\r\n}",U="#version 300 es\r\nprecision highp float;\r\n\r\n#define SHADER_NAME skyboxFragment\r\n\r\nuniform samplerCube skybox;\r\nuniform mat4 viewDirectionProjectionInverse;\r\n\r\n${declarations}\r\n  \r\nin vec4 v_position;\r\n  \r\n// we need to declare an output for the fragment shader\r\nout vec4 fragColor;\r\n  \r\nvoid main() {\r\n  vec4 t = viewDirectionProjectionInverse * v_position;\r\n  fragColor = texture(skybox, normalize(t.xyz / t.w));\r\n  ${toneMappings}\r\n}";async function d(t){let o,_;function T(n){o=n}function p(){return o}const P={createProgram:n,setupProgram:[a,i],setupMaterial:[],bindTextures:[C(p)],setupCamera:R,useProgram:s,selectProgram:u,updateProgram:[x((function(n){_=n}))],meshes:[{attributes:{positionsSize:2,positions:new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1])},drawMode:c[4]}],postDraw:I((function(){return _}))};let g,f,m;return!function(n){return"url"in n&&"string"==typeof n.url}(t)?function(n){return"typedArray"in n&&n.typedArray instanceof Uint16Array}(t)&&(f=t.typedArray,P.createProgram=function(r){return function(e){return function(){null!=r&&r(),n(e)()}}}(function(n,t,o,a,i,s,u){return function(){const{gl:c}=E;if(null==o()){const o=a(n,c,i,s,u);t(o),r(),e.update((n=>n))}}}(f,T,p,t.convertToCube,t.width,t.height,t.cubeSize)),m=t.toneMapping,P.setupProgram=[M(m),...P.setupProgram],P.setupMaterial=[C(p)],g={}):(P.setupMaterial=[await t.convertToCube(t.url,T)],P.setupProgram=[M(),...P.setupProgram],g={url:t.url}),{...g,order:1,programs:[P],getTexture:p}}function M(n){return function(){const{gl:r,program:e}=E;let a="",i="";null!=n&&(a=n.shader({declaration:!0,exposure:n.exposure}),i=n.shader({color:!0}));const s=t(U,{declarations:"",toneMappings:""})({declarations:a,toneMappings:i});o(r,e,A,s)}}function R(n){return function(){const{gl:r,program:e,canvas:t}=E,{projection:o}=_(n,t.width,t.height),a=(i=n.position,s=n.target,u=n.up,c=p(),A=g(m(),f(m(),i,s)),U=g(m(),l(m(),u,A)),d=g(m(),l(m(),A,U)),c[0]=U[0],c[1]=U[1],c[2]=U[2],c[3]=0,c[4]=d[0],c[5]=d[1],c[6]=d[2],c[7]=0,c[8]=A[0],c[9]=A[1],c[10]=A[2],c[11]=0,c[12]=i[0],c[13]=i[1],c[14]=i[2],c[15]=1,c);var i,s,u,c,A,U,d;const M=T(p(),a);M[12]=0,M[13]=0,M[14]=0;const R=P(p(),o,M),v=T(p(),R),C=r.getUniformLocation(e,"viewDirectionProjectionInverse");r.uniformMatrix4fv(C,!1,v)}}async function v(n,r){const t=new Image;return await new Promise(((r,e)=>{t.src=n,t.onload=function(){r(t)},t.onerror=e})),function(){const{gl:t}=E,o=t.createTexture();r(o),t.bindTexture(t.TEXTURE_CUBE_MAP,o);const a=new Image;a.src=n,t.bindTexture(t.TEXTURE_CUBE_MAP,o),function(n,r){const e=document.createElement("canvas"),t=e.getContext("2d"),o=n.width/4,a=n.height/3;e.width=o,e.height=a;const i=[[2,1,r.TEXTURE_CUBE_MAP_POSITIVE_X],[0,1,r.TEXTURE_CUBE_MAP_NEGATIVE_X],[1,0,r.TEXTURE_CUBE_MAP_POSITIVE_Y],[1,2,r.TEXTURE_CUBE_MAP_NEGATIVE_Y],[1,1,r.TEXTURE_CUBE_MAP_POSITIVE_Z],[3,1,r.TEXTURE_CUBE_MAP_NEGATIVE_Z]];i.forEach((([i,s,u])=>{t.clearRect(0,0,o,a),t.drawImage(n,i*o,s*a,o,a,0,0,o,a),r.texImage2D(u,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)}))}(a,t),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.generateMipmap(t.TEXTURE_CUBE_MAP),e.update((n=>n))}}function C(n){return function(){const{gl:r,program:e}=E,t=r.getUniformLocation(e,"envMap");r.uniform1i(t,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_CUBE_MAP,n())}}function x(n){return function(){const{gl:r}=E;n(r.getParameter(r.DEPTH_FUNC)),r.depthFunc(r.LEQUAL)}}function I(n){return function(){const{gl:r}=E;r.depthFunc(n())}}export{d as c,v as s};
