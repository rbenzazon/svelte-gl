import{av as r,Z as a,_ as e,a0 as t,a1 as n,a4 as o,aw as i,U as s,T as l,R as c}from"./engine.js";var v="#version 300 es\r\nprecision mediump float;\r\n\r\n#define SHADER_NAME basicFragment\r\n\r\n// Input from vertex shader\r\nin vec3 vertexColor;\r\nin vec3 vNormal;\r\nin vec3 vertex;\r\nin vec3 vViewPosition;\r\nin highp vec2 vUv;\r\n\r\n// Output color\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    // Simply use the vertex color for the fragment color\r\n    // This will create a simple colored line with no lighting effects\r\n    fragColor = vec4(vertexColor, 1.0);\r\n    \r\n    // Alternative: if you want slightly smoother lines with anti-aliasing\r\n    // float intensity = 1.0;\r\n    // fragColor = vec4(vertexColor * intensity, 1.0);\r\n}";function m(){return{createProgram:r,setupProgram:[f,a,e],setupMaterial:[],useProgram:t,selectProgram:n,updateProgram:[]}}function f(){const{gl:r,program:a}=l,e=o(i,{instances:!1,declarations:"",positionModifier:""})({instances:!1,declarations:"",positionModifier:""});s(r,a,e,v)}function p(r){const{normals:a,positions:e}=r.attributes,t="Float32Array"!=typeof e&&"data"in e?e.data:e,n="Float32Array"!=typeof a&&"data"in a?a.data:a,o=[];for(let r=0;r<t.length;r+=3)o.push(t[r],t[r+1],t[r+2]),o.push(t[r]+.2*n[r],t[r+1]+.2*n[r+1],t[r+2]+.2*n[r+2]);return{attributes:{positions:new Float32Array(o)},matrix:r.matrix.value,material:r.material,drawMode:c[1]}}export{m as a,p as c};
