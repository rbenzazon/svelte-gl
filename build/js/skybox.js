import{at as e,aC as n,r,a4 as t,U as o,Z as a,_ as i,a0 as s,a1 as E,aD as c,aE as u,aF as T,T as _,R as g,J as p,aG as l,av as P,z as f,Q as m,P as U,W as A,O as v}from"./engine.js";async function d(t){let o;function p(e){o=e}function l(){return o}const P={createProgram:e,setupProgram:[a,i],setupMaterial:[],bindTextures:[C(l)],setupCamera:M,useProgram:s,selectProgram:E,updateProgram:[c("LEQUAL")],meshes:[{attributes:{positionsSize:2,positions:new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1])},drawMode:g[4]}],setFrameBuffer:u,postDraw:T};let f,m;if(function(e){return"url"in e&&"string"==typeof e.url}(t)){P.setupMaterial=[await t.convertToCube(t.url,p)];const e=t.hdrEncoding??!1;P.setupProgram=[R(null,e),...P.setupProgram],f={url:t.url}}else if(function(e){return"typedArray"in e&&e.typedArray instanceof Uint16Array||"texture"in e&&e.texture instanceof WebGLTexture}(t)){const o=t.typedArray??t.texture;P.createProgram=function(n){return function(r){return function(){null!=n&&n(),e(r)()}}}(function(e,t,o,a,i,s,E){return function(){const{gl:c}=_;if(null==o()){const o=a(e,c,i,s,E);t(o),n(),r.update((e=>e))}}}(o,p,l,t.convertToCube,t.width,t.height,t.cubeSize)),m=t.toneMapping,P.setupProgram=[R(m,!0),...P.setupProgram],P.setupMaterial=[C(l)],f={}}return{...f,order:0,programs:[P],getTexture:l}}function R(e,n){return function(){const{gl:r,program:a}=_;let i="",s="";null!=e&&(i=e.shader({declaration:!0,exposure:e.exposure}),s=e.shader({color:!0}));const E=t("#version 300 es\r\nprecision highp float;\n\n#define SHADER_NAME skyboxFragment\n\nuniform samplerCube skybox;\r\nuniform mat4 viewDirectionProjectionInverse;\n\n${declarations}\r\n  \r\nin vec4 v_position;\r\n  \n\nout vec4 fragColor;\r\nvec4 sRGBTransferOETF( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\r\n}\r\nvoid main() {\r\n  vec4 t = viewDirectionProjectionInverse * v_position;\r\n  fragColor = texture(skybox, normalize(t.xyz / t.w));\r\n  ${toneMappings}\r\n  ${hdrEncoding ? `\r\n  fragColor = sRGBTransferOETF(fragColor);\r\n  ` : ''}\r\n}",{declarations:"",toneMappings:"",hdrEncoding:!1})({declarations:i,toneMappings:s,hdrEncoding:n});o(r,a,"#version 300 es\n\n#define SHADER_NAME skyboxVertex\n\nin vec4 position;\r\nout vec4 v_position;\r\nvoid main() {\r\n    v_position = position;\r\n    gl_Position = position;\r\n    gl_Position.z = 1.0;\r\n}",E)}}function M(e){return function(){const{gl:n,program:r}=_,t=p(e),{projection:o}=e,a=(i=t.position,s=t.target,E=t.up,c=f(),u=m(A(),U(A(),i,s)),T=m(A(),v(A(),E,u)),g=m(A(),v(A(),u,T)),c[0]=T[0],c[1]=T[1],c[2]=T[2],c[3]=0,c[4]=g[0],c[5]=g[1],c[6]=g[2],c[7]=0,c[8]=u[0],c[9]=u[1],c[10]=u[2],c[11]=0,c[12]=i[0],c[13]=i[1],c[14]=i[2],c[15]=1,c);var i,s,E,c,u,T,g;const d=l(f(),a);d[12]=0,d[13]=0,d[14]=0;const R=P(f(),o,d),M=l(f(),R),x=n.getUniformLocation(r,"viewDirectionProjectionInverse");n.uniformMatrix4fv(x,!1,M)}}async function x(e,n){const t=new Image;return await new Promise(((n,r)=>{t.src=e,t.onload=function(){n(t)},t.onerror=r})),function(){const{gl:t}=_,o=t.createTexture();n(o),t.bindTexture(t.TEXTURE_CUBE_MAP,o);const a=new Image;a.src=e,t.bindTexture(t.TEXTURE_CUBE_MAP,o),function(e,n){const r=document.createElement("canvas"),t=r.getContext("2d"),o=e.width/4,a=e.height/3;r.width=o,r.height=a;const i=[[2,1,n.TEXTURE_CUBE_MAP_POSITIVE_X],[0,1,n.TEXTURE_CUBE_MAP_NEGATIVE_X],[1,0,n.TEXTURE_CUBE_MAP_POSITIVE_Y],[1,2,n.TEXTURE_CUBE_MAP_NEGATIVE_Y],[1,1,n.TEXTURE_CUBE_MAP_POSITIVE_Z],[3,1,n.TEXTURE_CUBE_MAP_NEGATIVE_Z]];i.forEach((([i,s,E])=>{t.clearRect(0,0,o,a),t.drawImage(e,i*o,s*a,o,a,0,0,o,a),n.texImage2D(E,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,r)}))}(a,t),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.generateMipmap(t.TEXTURE_CUBE_MAP),r.update((e=>e))}}function C(e){return function(){const{gl:n,program:r}=_,t=n.getUniformLocation(r,"envMap");n.uniform1i(t,0),n.activeTexture(n.TEXTURE0),n.bindTexture(n.TEXTURE_CUBE_MAP,e())}}export{d as c,x as s};
