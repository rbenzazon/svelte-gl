import{at as r,aC as e,r as n,a4 as t,U as o,Z as a,_ as i,a0 as s,a1 as E,aD as u,aE as c,aF as T,T as _,R as g,F as p,aG as l,av as f,y as P,Q as m,P as U,W as d,O as A}from"./engine.js";async function v(t){let o;function p(r){o=r}function l(){return o}const f={createProgram:r,setupProgram:[a,i],setupMaterial:[],bindTextures:[C(l)],setupCamera:M,useProgram:s,selectProgram:E,updateProgram:[u("LEQUAL")],meshes:[{attributes:{positionsSize:2,positions:new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1])},drawMode:g[4]}],setFrameBuffer:c,postDraw:T};let P,m;if(function(r){return"url"in r&&"string"==typeof r.url}(t)){f.setupMaterial=[await t.convertToCube(t.url,p)];const r=t.hdrEncoding??!1;f.setupProgram=[R(null,r),...f.setupProgram],P={url:t.url}}else if(function(r){return"typedArray"in r&&r.typedArray instanceof Uint16Array||"texture"in r&&r.texture instanceof WebGLTexture}(t)){const o=t.typedArray??t.texture;f.createProgram=function(e){return function(n){return function(){null!=e&&e(),r(n)()}}}(function(r,t,o,a,i,s,E){return function(){const{gl:u}=_;if(null==o()){const o=a(r,u,i,s,E);t(o),e(),n.update((r=>r))}}}(o,p,l,t.convertToCube,t.width,t.height,t.cubeSize)),m=t.toneMapping,f.setupProgram=[R(m,!0),...f.setupProgram],f.setupMaterial=[C(l)],P={}}return{...P,order:0,programs:[f],getTexture:l}}function R(r,e){return function(){const{gl:n,program:a}=_;let i="",s="";null!=r&&(i=r.shader({declaration:!0,exposure:r.exposure}),s=r.shader({color:!0}));const E=t("#version 300 es\r\nprecision highp float;\r\n\r\n#define SHADER_NAME skyboxFragment\r\n\r\nuniform samplerCube skybox;\r\nuniform mat4 viewDirectionProjectionInverse;\r\n\r\n${declarations}\r\n  \r\nin vec4 v_position;\r\n  \r\n// we need to declare an output for the fragment shader\r\nout vec4 fragColor;\r\nvec4 sRGBTransferOETF( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\r\n}\r\nvoid main() {\r\n  vec4 t = viewDirectionProjectionInverse * v_position;\r\n  fragColor = texture(skybox, normalize(t.xyz / t.w));\r\n  ${toneMappings}\r\n  ${hdrEncoding ? `\r\n  fragColor = sRGBTransferOETF(fragColor);\r\n  ` : ''}\r\n}",{declarations:"",toneMappings:"",hdrEncoding:!1})({declarations:i,toneMappings:s,hdrEncoding:e});o(n,a,"#version 300 es\r\n\r\n#define SHADER_NAME skyboxVertex\r\n\r\nin vec4 position;\r\nout vec4 v_position;\r\nvoid main() {\r\n    v_position = position;\r\n    gl_Position = position;\r\n    gl_Position.z = 1.0;\r\n}",E)}}function M(r){return function(){const{gl:e,program:n}=_,t=p(r),{projection:o}=r,a=(i=t.position,s=t.target,E=t.up,u=P(),c=m(d(),U(d(),i,s)),T=m(d(),A(d(),E,c)),g=m(d(),A(d(),c,T)),u[0]=T[0],u[1]=T[1],u[2]=T[2],u[3]=0,u[4]=g[0],u[5]=g[1],u[6]=g[2],u[7]=0,u[8]=c[0],u[9]=c[1],u[10]=c[2],u[11]=0,u[12]=i[0],u[13]=i[1],u[14]=i[2],u[15]=1,u);var i,s,E,u,c,T,g;const v=l(P(),a);v[12]=0,v[13]=0,v[14]=0;const R=f(P(),o,v),M=l(P(),R),x=e.getUniformLocation(n,"viewDirectionProjectionInverse");e.uniformMatrix4fv(x,!1,M)}}async function x(r,e){const t=new Image;return await new Promise(((e,n)=>{t.src=r,t.onload=function(){e(t)},t.onerror=n})),function(){const{gl:t}=_,o=t.createTexture();e(o),t.bindTexture(t.TEXTURE_CUBE_MAP,o);const a=new Image;a.src=r,t.bindTexture(t.TEXTURE_CUBE_MAP,o),function(r,e){const n=document.createElement("canvas"),t=n.getContext("2d"),o=r.width/4,a=r.height/3;n.width=o,n.height=a;const i=[[2,1,e.TEXTURE_CUBE_MAP_POSITIVE_X],[0,1,e.TEXTURE_CUBE_MAP_NEGATIVE_X],[1,0,e.TEXTURE_CUBE_MAP_POSITIVE_Y],[1,2,e.TEXTURE_CUBE_MAP_NEGATIVE_Y],[1,1,e.TEXTURE_CUBE_MAP_POSITIVE_Z],[3,1,e.TEXTURE_CUBE_MAP_NEGATIVE_Z]];i.forEach((([i,s,E])=>{t.clearRect(0,0,o,a),t.drawImage(r,i*o,s*a,o,a,0,0,o,a),e.texImage2D(E,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)}))}(a,t),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.generateMipmap(t.TEXTURE_CUBE_MAP),n.update((r=>r))}}function C(r){return function(){const{gl:e,program:n}=_,t=e.getUniformLocation(n,"envMap");e.uniform1i(t,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_CUBE_MAP,r())}}export{v as c,x as s};
