import { S as SvelteComponent, i as init, s as safe_not_equal, M as Menu, e as element, a as space, c as create_component, b as insert, m as mount_component, n as noop, t as transition_in, d as transition_out, f as detach, g as destroy_component, h as component_subscribe, o as onMount, r as renderer, j as scene, k as camera, l as renderPasses, p as transformMat4, q as rotateZ, u as scale, v as translate, w as identity, x as set_store_value, y as skyblue, z as createLightStore, A as createPointLight, B as createOrbitControls, C as binding_callbacks } from './Menu-DoYCXcTV.js';
import { c as createPolyhedron, a as createTexture, b as createSmoothShadedNormals } from './texture-BOsoKRNz.js';
import { c as createCube } from './cube-CINuEix-.js';
import { c as createContactShadowPass, a as createPlane } from './contact-shadow-zwk_xbUC.js';
import { l as loadGLTFFile, t as traverseScene, g as getAbsoluteNodeMatrix, c as createCameraFromGLTF, a as createMeshFromGLTF } from './gltf-loader-DmdwT1be.js';

/* src\contact-shadow.svelte generated by Svelte v4.2.18 */

function create_fragment(ctx) {
	let canvas_1;
	let t;
	let menu;
	let current;
	menu = new Menu({});

	return {
		c() {
			canvas_1 = element("canvas");
			t = space();
			create_component(menu.$$.fragment);
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[1](canvas_1);
			insert(target, t, anchor);
			mount_component(menu, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(canvas_1);
				detach(t);
			}

			/*canvas_1_binding*/ ctx[1](null);
			destroy_component(menu, detaching);
		}
	};
}

function animate() {
	performance.now() / 1000;
} /*$camera = {
	position: [0, 5, -zpos],
};*/ //console.log("animate", $camera.position);

function instance($$self, $$props, $$invalidate) {
	let $renderer;
	let $scene;
	let $camera;
	let $renderPasses;
	component_subscribe($$self, renderer, $$value => $$invalidate(2, $renderer = $$value));
	component_subscribe($$self, scene, $$value => $$invalidate(3, $scene = $$value));
	component_subscribe($$self, camera, $$value => $$invalidate(4, $camera = $$value));
	component_subscribe($$self, renderPasses, $$value => $$invalidate(5, $renderPasses = $$value));
	let canvas;

	onMount(async () => {
		const file = await loadGLTFFile("models/v2/md-blend6-mdlvw.gltf", "models/v2/md-blend6-mdlvw.bin");
		let meshObject;
		let cameraGLTF;

		traverseScene(file.scene, o => {
			if (o.position != null) {
				meshObject = o;
			} else if (o.camera != null) {
				cameraGLTF = o;
			}
		});

		const cameraAbsoluteMatrix = getAbsoluteNodeMatrix(cameraGLTF);
		const cameraFromFile = createCameraFromGLTF(cameraGLTF);
		transformMat4(cameraFromFile.position, cameraFromFile.position, cameraAbsoluteMatrix);
		const meshAbsoluteMatrix = getAbsoluteNodeMatrix(meshObject);
		rotateZ(meshAbsoluteMatrix, meshAbsoluteMatrix, Math.PI);
		scale(meshAbsoluteMatrix, meshAbsoluteMatrix, [200, 200, 200]);
		translate(meshAbsoluteMatrix, meshAbsoluteMatrix, [0, 0, -500]);
		meshObject.matrix = meshAbsoluteMatrix;
		const loadedMesh = createMeshFromGLTF(file, meshObject);
		loadedMesh.matrix = meshAbsoluteMatrix;
		const groundMatrix = identity(new Float32Array(16));
		translate(groundMatrix, groundMatrix, [0, -1.2, 0]);

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				canvas,
				backgroundColor: skyblue,
				ambientLightColor: [0xffffff, 0.1]
			},
			$renderer
		);

		const shadowPass = createContactShadowPass(groundMatrix, 1, 10, 10, 1024, 128, 20);
		const { getTexture: shadowTexture } = shadowPass;
		set_store_value(renderPasses, $renderPasses = [shadowPass], $renderPasses);

		set_store_value(
			camera,
			$camera = {
				position: [0, 5, -5],
				target: [0, 1, 0],
				fov: 75
			},
			$camera
		);

		const cubeMesh = createCube();
		const sphereMesh = createPolyhedron(1, 5, createSmoothShadedNormals);

		const light = createLightStore(createPointLight({
			position: [-2, 3, -3],
			color: [1, 1, 1],
			intensity: 15,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		const light2 = createLightStore(createPointLight({
			position: [2, -1, -1],
			color: [1, 1, 1],
			intensity: 15,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		const objScale = 0.5;
		const cubePos = identity(new Float32Array(16));
		translate(cubePos, cubePos, [3, 0, 0]);
		scale(cubePos, cubePos, [objScale, objScale, objScale]);
		const spherePos = identity(new Float32Array(16));
		translate(spherePos, spherePos, [-3, 0, 0]);
		scale(spherePos, spherePos, [objScale, objScale, objScale]);
		const sameMaterial = { diffuse: [1, 0.5, 0.5], metalness: 0 };
		const groundMesh = createPlane(10, 10, 1, 1);

		const groundDiffuseMap = await createTexture({
			textureBuffer: shadowTexture,
			type: "diffuse"
		});

		await createTexture({
			url: "transparent-texture.png",
			type: "diffuse"
		});

		const groundMaterial = {
			diffuse: [1, 1, 1],
			metalness: 0,
			diffuseMap: groundDiffuseMap
		};

		set_store_value(
			scene,
			$scene = [
				...$scene,
				loadedMesh,
				{
					...sphereMesh,
					matrix: spherePos,
					material: sameMaterial
				},
				{
					...cubeMesh,
					matrix: cubePos,
					material: sameMaterial
				},
				{
					...groundMesh,
					matrix: groundMatrix,
					material: groundMaterial
				},
				light,
				light2
			],
			$scene
		);

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				loop: animate,
				enabled: true
			},
			$renderer
		);

		createOrbitControls(canvas, camera);
	}); /*setTimeout(() => {
	$camera = {
		position: [0, 5, -4],
	};
}, 1000);*/

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	return [canvas, canvas_1_binding];
}

class Contact_shadow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Contact_shadow as default };
