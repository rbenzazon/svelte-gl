import { S as SvelteComponent, i as init, s as safe_not_equal, M as Menu, e as element, a as space, c as create_component, b as insert, m as mount_component, n as noop, t as transition_in, d as transition_out, f as detach, g as destroy_component, h as component_subscribe, o as onMount, r as renderer, l as lights, j as scene, k as materials, p as camera, q as renderPasses, u as transformMat4, v as rotateZ, w as scale, x as translate, y as identity, z as createZeroMatrix, A as set_store_value, B as skyblue, C as createLightStore, D as createPointLight, E as create3DObject, F as createOrbitControls, G as binding_callbacks, H as createMaterialStore } from './Menu-DpZKAeDf.js';
import { c as createPolyhedron, a as createSmoothShadedNormals } from './polyhedron-B7UgHsuC.js';
import { c as createPlane } from './plane-vS0EMVPw.js';
import { c as createTexture } from './texture-BIGlSWMv.js';
import { c as createContactShadowPass } from './contact-shadow-C0m0LqB4.js';
import { l as loadGLTFFile, m as mapScene, i as isGLTFMeshData, a as isGLTFCameraData, g as getAbsoluteNodeMatrix, c as createCameraFromGLTF, b as createMeshFromGLTF } from './gltf-loader-CK_SmVI-.js';
import './specular-BKewLJsb.js';

/* src\main-refactor.svelte generated by Svelte v4.2.18 */

function create_fragment(ctx) {
	let canvas_1;
	let t;
	let menu;
	let current;
	menu = new Menu({});

	return {
		c() {
			canvas_1 = element("canvas");
			t = space();
			create_component(menu.$$.fragment);
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[1](canvas_1);
			insert(target, t, anchor);
			mount_component(menu, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(canvas_1);
				detach(t);
			}

			/*canvas_1_binding*/ ctx[1](null);
			destroy_component(menu, detaching);
		}
	};
}

function animate() {
	
} // animate here

function instance($$self, $$props, $$invalidate) {
	let $renderer;
	let $lights;
	let $scene;
	let $materials;
	let $camera;
	let $renderPasses;
	component_subscribe($$self, renderer, $$value => $$invalidate(2, $renderer = $$value));
	component_subscribe($$self, lights, $$value => $$invalidate(3, $lights = $$value));
	component_subscribe($$self, scene, $$value => $$invalidate(4, $scene = $$value));
	component_subscribe($$self, materials, $$value => $$invalidate(5, $materials = $$value));
	component_subscribe($$self, camera, $$value => $$invalidate(6, $camera = $$value));
	component_subscribe($$self, renderPasses, $$value => $$invalidate(7, $renderPasses = $$value));
	let canvas;

	onMount(async () => {
		const file = await loadGLTFFile("models/v2/md-blend6-mdlvw.gltf", "models/v2/md-blend6-mdlvw.bin");
		const sceneObjects = mapScene(file.scene);
		const meshObject = sceneObjects.find(isGLTFMeshData);
		const cameraGLTF = sceneObjects.find(isGLTFCameraData);
		const cameraAbsoluteMatrix = getAbsoluteNodeMatrix(cameraGLTF);
		const cameraFromFile = createCameraFromGLTF(cameraGLTF);
		transformMat4(cameraFromFile.position, cameraFromFile.position, cameraAbsoluteMatrix);
		const meshAbsoluteMatrix = getAbsoluteNodeMatrix(meshObject);
		rotateZ(meshAbsoluteMatrix, meshAbsoluteMatrix, Math.PI);
		scale(meshAbsoluteMatrix, meshAbsoluteMatrix, [200, 200, 200]);
		translate(meshAbsoluteMatrix, meshAbsoluteMatrix, [0, 0, -500]);
		const loadedMesh = createMeshFromGLTF(file, meshObject);
		const groundMatrix = identity(createZeroMatrix());
		translate(groundMatrix, groundMatrix, [0, -1.5, 0]);

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				canvas,
				backgroundColor: skyblue,
				ambientLightColor: [0xffffff, 0.1]
			},
			$renderer
		);

		const shadowPass = createContactShadowPass(groundMatrix, 1, 10, 10, 1024, 128, 0.5);
		const { getTexture: shadowTexture } = shadowPass;
		set_store_value(renderPasses, $renderPasses = [shadowPass], $renderPasses);

		set_store_value(
			camera,
			$camera = {
				...$camera,
				position: [0, 5, -5],
				target: [0, 2, 0],
				fov: 75
			},
			$camera
		);
		const sphereMesh = createPolyhedron(1, 5, createSmoothShadedNormals);

		const light = createLightStore(createPointLight({
			position: [-2, 3, -3],
			color: [1, 1, 1],
			intensity: 20,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		const light2 = createLightStore(createPointLight({
			position: [2, -1, -1],
			color: [1, 1, 1],
			intensity: 20,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		const secondCubePos = identity(createZeroMatrix());
		translate(secondCubePos, secondCubePos, [3, 0, 0]);
		scale(secondCubePos, secondCubePos, [0.1, 0.1, 0.1]);
		const groundMesh = createPlane(10, 10, 1, 1);

		const groundDiffuseMap = await createTexture({
			textureBuffer: shadowTexture,
			type: "diffuse"
		});

		await createTexture({
			url: "transparent-texture.png",
			type: "diffuse"
		});

		const groundMaterial = createMaterialStore({
			diffuse: [1, 1, 1],
			metalness: 0,
			diffuseMap: groundDiffuseMap,
			transparent: true
		});

		const transparentMaterial = createMaterialStore({
			diffuse: [1, 1, 0.5],
			metalness: 0,
			opacity: 0.5
		});

		const meshMaterial = createMaterialStore(loadedMesh.material);
		set_store_value(materials, $materials = [...$materials, groundMaterial, transparentMaterial, meshMaterial], $materials);

		set_store_value(
			scene,
			$scene = [
				...$scene,
				create3DObject({
					...loadedMesh,
					matrix: meshAbsoluteMatrix,
					material: meshMaterial
				}),
				create3DObject({
					...sphereMesh,
					matrix: secondCubePos,
					material: transparentMaterial
				}),
				/*create3DObject({
	...cubeMesh,
	matrix: secondCubePos,
	material: sameMaterial,
}),*/
				create3DObject({
					...groundMesh,
					matrix: groundMatrix,
					material: groundMaterial
				})
			],
			$scene
		);

		set_store_value(lights, $lights = [...$lights, light, light2], $lights);

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				loop: animate,
				enabled: true
			},
			$renderer
		);

		createOrbitControls(canvas, camera);
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	return [canvas, canvas_1_binding];
}

class Main_refactor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Main_refactor as default };
