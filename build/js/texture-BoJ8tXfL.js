import{a6 as r,T as e}from"./engine-KQm4jTw7.js";const n={diffuse:"diffuseMap",normal:"normalMap",roughness:"roughnessMap"},a={diffuse:0,normal:1,roughness:2},t=async e=>{let t,c;var v;let l;return e.url?t=await(v=e.url,new Promise(((r,e)=>{const n=new Image;n.onload=()=>{r(n)},n.onerror=e,n.src=v}))):"function"==typeof e.textureBuffer&&(c=e.textureBuffer),{type:n[e.type],coordinateSpace:e.coordinateSpace,shader:r("${declaration?\r\n`\r\nuniform sampler2D ${mapType};\r\n` : ''\r\n}\r\n${declarationNormal?\r\n`\r\nuniform vec2 normalScale;\r\nmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\r\n    vec3 q0 = dFdx( eye_pos.xyz );\r\n    vec3 q1 = dFdy( eye_pos.xyz );\r\n    vec2 st0 = dFdx( uv.st );\r\n    vec2 st1 = dFdy( uv.st );\r\n    vec3 N = surf_norm;\r\n    vec3 q1perp = cross( q1, N );\r\n    vec3 q0perp = cross( N, q0 );\r\n    vec3 T = q1perp * st0.x + q0perp * st1.x;\r\n    vec3 B = q1perp * st0.y + q0perp * st1.y;\r\n    float det = max( dot( T, T ), dot( B, B ) );\r\n    float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\r\n    return mat3( T * scale, B * scale, N );\r\n}\r\n` : ''\r\n}\r\n${diffuseMapSample?\r\n`\r\n    //atan(uv.y, uv.x)\r\n    ${coordinateSpace === 'circular' ?\r\n`   vec2 uv = vec2(vUv.x/vUv.y, vUv.y);\r\n` :\r\n`   vec2 uv = vUv;\r\n`}\r\n    vec4 textureColor = texture( ${mapType}, uv );\r\n    material.diffuseColor *= textureColor.rgb;\r\n    material.diffuseAlpha = textureColor.a;\r\n    \r\n` : ''\r\n}\r\n${normalMapSample?\r\n`\r\n    mat3 tbn =  getTangentFrame( -vViewPosition, vNormal, vUv );\r\n    vec2 rotatedUv = vec2(vUv.x, vUv.y);\r\n    normal = texture( ${mapType}, rotatedUv ).xyz * 2.0 - 1.0;\r\n    normal.xy *= normalScale;\r\n    normal = normalize(tbn * normal);\r\n\t//normal = normalize( normalMatrix * normal );\r\n` : ''\r\n}\r\n${roughnessMapSample?\r\n`\r\n    //atan(uv.y, uv.x)\r\n    ${coordinateSpace === 'circular' ?\r\n`   vec2 roughnessUv = vec2(vUv.x/vUv.y, vUv.y);\r\n` :\r\n`   vec2 roughnessUv = vec2(vUv.x, vUv.y);\r\n`}\r\n    vec4 texelRoughness = texture( ${mapType}, roughnessUv );\r\n    roughnessFactor = texelRoughness.g;\r\n` : ''\r\n}\r\n",{declaration:!1,declarationNormal:!1,diffuseMapSample:!1,normalMapSample:!1,roughnessMapSample:!1,mapType:void 0,coordinateSpace:void 0}),setupTexture:u(t,n[e.type],a[e.type],e.normalScale,(function(r){l=r}),c),bindTexture:o(a[e.type],(function(){return l}),n[e.type]),...e.url?{url:e.url}:{}}};function o(r,n,a){return function(){const{gl:t,program:o}=e,u=t.getUniformLocation(o,a);t.activeTexture(t["TEXTURE"+r]),t.bindTexture(t.TEXTURE_2D,n()),t.uniform1i(u,r)}}function u(r,n,a,t=[1,1],o,u=null){return function(){const{gl:c,program:v}=e;let l;l=null!==u?u():c.createTexture(),o(l);const s=c.getUniformLocation(v,n);if(c.activeTexture(c["TEXTURE"+a]),c.bindTexture(c.TEXTURE_2D,l),c.uniform1i(s,a),null===u&&c.texImage2D(c.TEXTURE_2D,0,c.RGBA,c.RGBA,c.UNSIGNED_BYTE,r),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,c.LINEAR_MIPMAP_LINEAR),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,c.CLAMP_TO_EDGE),c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,c.CLAMP_TO_EDGE),c.generateMipmap(c.TEXTURE_2D),null!=t){const r=c.getUniformLocation(v,"normalScale");c.uniform2fv(r,t)}}}export{t as c};
