import { S as SvelteComponent, i as init, s as safe_not_equal, M as Menu, e as element, a as space, c as create_component, b as insert, m as mount_component, n as noop, t as transition_in, d as transition_out, f as detach, g as destroy_component, h as component_subscribe, o as onMount, r as renderer, l as lights, j as scene, k as materials, p as camera, z as set_store_value, A as skyblue, y as identity, x as translate, L as rotateY, w as scale, B as createLightStore, C as createPointLight, D as create3DObject, E as createOrbitControls, F as binding_callbacks, G as createMaterialStore, O as get_store_value, P as rotateX, v as rotateZ, a0 as toRadian } from './Menu-zg4L83RP.js';
import { c as createCube } from './cube-B_V_cbcL.js';

/* src\instances.svelte generated by Svelte v4.2.18 */

function create_fragment(ctx) {
	let canvas_1;
	let t;
	let menu;
	let current;
	menu = new Menu({});

	return {
		c() {
			canvas_1 = element("canvas");
			t = space();
			create_component(menu.$$.fragment);
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[1](canvas_1);
			insert(target, t, anchor);
			mount_component(menu, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(canvas_1);
				detach(t);
			}

			/*canvas_1_binding*/ ctx[1](null);
			destroy_component(menu, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $renderer;
	let $lights;
	let $scene;
	let $materials;
	let $camera;
	component_subscribe($$self, renderer, $$value => $$invalidate(3, $renderer = $$value));
	component_subscribe($$self, lights, $$value => $$invalidate(4, $lights = $$value));
	component_subscribe($$self, scene, $$value => $$invalidate(5, $scene = $$value));
	component_subscribe($$self, materials, $$value => $$invalidate(6, $materials = $$value));
	component_subscribe($$self, camera, $$value => $$invalidate(7, $camera = $$value));
	let canvas;
	let cube;

	onMount(async () => {
		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				canvas,
				backgroundColor: skyblue,
				ambientLightColor: [0xffffff, 0.1]
			},
			$renderer
		);

		set_store_value(
			camera,
			$camera = {
				position: [0, 5, -5],
				target: [0, 1, 0],
				fov: 75
			},
			$camera
		);

		const cubeMesh = createCube();
		const cubePos = identity(new Float32Array(16));
		translate(cubePos, cubePos, [3, 1.5, 0]);
		const material = createMaterialStore({ diffuse: [1, 0.5, 0.5], metalness: 0 });
		set_store_value(materials, $materials = [...$materials, material], $materials);
		const numInstances = 3;
		let identityMatrix = new Array(16).fill(0);
		identity(identityMatrix);

		let matrices = new Array(numInstances).fill(0).map((_, index) => {
			const count = index - Math.floor(numInstances / 2);
			let mat = [...identityMatrix];

			//transform the model matrix
			translate(mat, mat, [count * 2, 0, 0]);

			rotateY(mat, mat, toRadian(count * 10));
			scale(mat, mat, [0.5, 0.5, 0.5]);
			return new Float32Array(mat);
		});

		const light = createLightStore(createPointLight({
			position: [-2, 3, -3],
			color: [1, 1, 1],
			intensity: 20,
			cutoffDistance: 0,
			decayExponent: 2
		}));

		cube = create3DObject({
			...cubeMesh,
			instances: numInstances,
			matrices,
			material
		});

		set_store_value(scene, $scene = [...$scene, cube], $scene);
		set_store_value(lights, $lights = [...$lights, light], $lights);

		set_store_value(
			renderer,
			$renderer = {
				...$renderer,
				loop: animate,
				enabled: true
			},
			$renderer
		);

		createOrbitControls(canvas, camera);
	});

	function rotateCube(cube, index) {
		const rotation = 0.001 * Math.PI;
		const tmp = get_store_value(cube.matrices[index]);
		rotateY(tmp, tmp, rotation / 2);
		rotateX(tmp, tmp, rotation);
		rotateZ(tmp, tmp, rotation / 3);
		cube.matrices[index].set(tmp);
	}

	function animate() {
		for (let i = 0; i < 3; i++) {
			rotateCube(cube, i);
		}
	}

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	return [canvas, canvas_1_binding];
}

class Instances extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Instances as default };
