import{R as a,at as r,Z as s,_ as t,a0 as n,a1 as e,a4 as o,au as i,U as l,T as c,S as m,i as f,s as u,M as p,e as g,a as v,c as d,b as h,m as x,n as y,t as b,d as w,f as C,g as A,h as M,o as P,r as $,l as k,k as j,p as E,q as F,j as D,u as S,v as T,C as I,D as N,x as R,y as U,A as _,E as q,I as H,w as L}from"./engine.js";import{c as O,s as V}from"./skybox.js";import{c as Z}from"./cube.js";function z(){const{gl:a,program:r}=c,s=o(i,{instances:!1,declarations:"",positionModifier:""})({instances:!1,declarations:"",positionModifier:""});l(a,r,s,"#version 300 es\r\nprecision mediump float;\r\n\r\n#define SHADER_NAME basicFragment\r\n\r\n// Input from vertex shader\r\nin vec3 vertexColor;\r\nin vec3 vNormal;\r\nin vec3 vertex;\r\nin vec3 vViewPosition;\r\nin highp vec2 vUv;\r\n\r\n// Output color\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    // Simply use the vertex color for the fragment color\r\n    // This will create a simple colored line with no lighting effects\r\n    fragColor = vec4(vertexColor, 1.0);\r\n    \r\n    // Alternative: if you want slightly smoother lines with anti-aliasing\r\n    // float intensity = 1.0;\r\n    // fragColor = vec4(vertexColor * intensity, 1.0);\r\n}")}function B(a){let r,s,t,n;return t=new p({}),{c(){r=g("canvas"),s=v(),d(t.$$.fragment)},m(e,o){h(e,r,o),a[1](r),h(e,s,o),x(t,e,o),n=!0},p:y,i(a){n||(b(t.$$.fragment,a),n=!0)},o(a){w(t.$$.fragment,a),n=!1},d(n){n&&(C(r),C(s)),a[1](null),A(t,n)}}}function G(){}function J(o,i,l){let c,m,f,u,p,g,v;return M(o,$,(a=>l(2,c=a))),M(o,k,(a=>l(3,m=a))),M(o,j,(a=>l(4,f=a))),M(o,E,(a=>l(5,u=a))),M(o,F,(a=>l(6,p=a))),M(o,D,(a=>l(7,g=a))),P((async()=>{S($,c={...c,canvas:v,backgroundColor:T,ambientLightColor:[16777215,.1]},c),S(D,g={...g,position:[0,2,-5],target:[0,0,0],fov:75},g);const o=await O({url:"skyboxes/skybox-flamingo-tonemapped.png",convertToCube:V});S(F,p=[o],p);const i=Z(),l=I(N({position:[-2,2,-2],color:[1,1,1],intensity:20,cutoffDistance:0,decayExponent:2})),d=R(U()),h=L({diffuse:[1,0,0],metalness:0,program:{createProgram:r,setupProgram:[z,s,t],setupMaterial:[],useProgram:n,selectProgram:e,updateProgram:[]}}),x=function(r){const{normals:s,positions:t}=r.attributes,n="Float32Array"!=typeof t&&"data"in t?t.data:t,e="Float32Array"!=typeof s&&"data"in s?s.data:s,o=[];for(let a=0;a<n.length;a+=3)o.push(n[a],n[a+1],n[a+2]),o.push(n[a]+.2*e[a],n[a+1]+.2*e[a+1],n[a+2]+.2*e[a+2]);return{attributes:{positions:new Float32Array(o)},matrix:r.matrix.value,material:r.material,drawMode:a[1]}}({...i,matrix:d,material:h}),y=L({diffuse:[1,.5,.5],metalness:0});S(E,u=[...u,y,h],u),S(j,f=[...f,_({...i,matrix:d,material:y}),_(x)],f),S(k,m=[...m,l],m),S($,c={...c,loop:G,enabled:!0},c),q(v,D)})),[v,function(a){H[a?"unshift":"push"]((()=>{v=a,l(0,v)}))}]}class K extends m{constructor(a){super(),f(this,a,J,B,u,{})}}export{K as default};
